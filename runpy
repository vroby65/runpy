#!/usr/bin/env python3
import os, sys, subprocess, re

def parse_imports(file):
    with open(file) as f:
        code = f.read()
    imports = re.findall(r'^\s*(?:import|from)\s+([\w\.]+)', code, re.M)
    std = sys.stdlib_module_names if hasattr(sys, "stdlib_module_names") else []
    return sorted(set(i.split('.')[0] for i in imports if i not in std))

def create_env(env_dir):
    if not os.path.exists(env_dir):
        subprocess.run([sys.executable, "-m", "venv", env_dir], check=True)

def install_deps(env_dir, deps):
    pip = os.path.join(env_dir, "bin", "pip")
    subprocess.run([pip, "install", *deps], check=True)

def run_script(env_dir, script, args):
    py = os.path.join(env_dir, "bin", "python")
    os.execv(py, [py, script] + args)

def main():
    if len(sys.argv) < 2:
        print("Usage: runpy programma.py [args...]")
        return
    script = sys.argv[1]
    env = os.path.join(".venv-runpy", os.path.basename(script))
    os.makedirs(".venv-runpy", exist_ok=True)

    print(f"🧠 Analisi dipendenze di {script}...")
    deps = parse_imports(script)
    print("📦 Dipendenze trovate:", deps)

    print(f"📁 Creo ambiente virtuale in {env}...")
    create_env(env)

    if deps:
        print("📥 Installo dipendenze...")
        install_deps(env, deps)

    print("🚀 Avvio script...")
    run_script(env, script, sys.argv[2:])

if __name__ == "__main__":
    main()

